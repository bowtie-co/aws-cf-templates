---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'RDS: instance (mysql, mariadb, or postgresql)'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentSSHBastionStack
      - ParentSourceStack
      # - ParentAlertStack
    - Label:
        default: 'RDS Parameters'
      Parameters:
      - DatabaseMultiAZ
      - DatabaseEngine
      - DatabaseEngineVersion
      - DatabaseInstanceClass
      - DatabaseStorageType
      - DatabaseAllocatedStorage
      - DatabaseSnapshot
      - DatabaseUser
      - DatabasePass
      - DatabaseName
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String

  ParentSSHBastionStack:
    Description: 'Stack name of the parent SSH bastion'
    Type: String

  ParentSourceStack:
    Description: 'Stack name of source stack (ECS Cluster, etc). Source Stack MUST export {STACK_NAME}-SecurityGroup for this to work!'
    Type: String

  DatabaseSnapshot:
    Description: Snapshot ID to restore (do not need to provide user & pass if restoring from snapshot)
    Type: String
    Default: ""

  DatabaseMultiAZ:
    Description: 'Use RDS multiple AZs? best for production'
    Type: String
    Default: 'no'
    AllowedValues:
      - 'yes'
      - 'no'

  DatabaseEngine:
    Type: String
    Default: mysql
    AllowedValues:
      - mysql
      - mariadb
      - postgres

  DatabaseEngineVersion:
    Description: Specific DB engine version to use (leave blank for latest)
    Type: String

  DatabaseInstanceClass:
    Description: DB instance class
    Type: String
    Default: db.t2.micro

  DatabaseAllocatedStorage:
    Type: Number
    Default: 8

  DatabaseStorageType:
    Type: String
    Default: gp2
    AllowedValues:
      - gp2
      - standard
      - io1

  DatabaseName:
    Description: Name for the application's database'
    Type: String
  
  DatabaseUser:
    Description: Username for database master user
    Type: String

  DatabasePass:
    Description: Password for database master user
    Type: String

Conditions:
  hasSSHBastion:
    !Not [!Equals [!Ref ParentSSHBastionStack, ""]]
  isMultiAZ:
    !Equals [!Ref DatabaseMultiAZ, "yes"]
  isSpecificVersion:
    !Not [!Equals [!Ref DatabaseEngineVersion, ""]]
  isMySQL:
    !Equals [!Ref DatabaseEngine, "mysql"]
  isMariaDB:
    !Equals [!Ref DatabaseEngine, "mariadb"]
  isMySQLCompatible:
    !Or [!Condition isMySQL, !Condition isMariaDB]
  isPostgreSQL:
    !Equals [!Ref DatabaseEngine, "postgres"]
  isRestore:
    !Not [!Equals [!Ref DatabaseSnapshot, ""]]
  allowBastionMySQL:
    !And [!Condition hasSSHBastion, !Condition isMySQLCompatible]
  allowBastionPostgreSQL:
    !And [!Condition hasSSHBastion, !Condition isPostgreSQL]

Resources:
  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet available for the application database
      SubnetIds: !Split
        - ','
        - 'Fn::ImportValue':
            !Sub '${ParentVPCStack}-SubnetsPrivate'
  
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-database
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  SecurityGroupSourceIngressMySQL:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: isMySQLCompatible
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSourceStack}-SecurityGroup'
  
  SecurityGroupBastionIngressMySQL:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: allowBastionMySQL
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'
  
  SecurityGroupSourceIngressPostgreSQL:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: isPostgreSQL
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSourceStack}-SecurityGroup'

  SecurityGroupBastionIngressPostgreSQL:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: allowBastionPostgreSQL
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'

  Database:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Snapshot
    Properties:
      AllocatedStorage: !Ref DatabaseAllocatedStorage
      DBInstanceClass: !Ref DatabaseInstanceClass
      DBName: !If [isRestore, !Ref "AWS::NoValue", !Ref DatabaseName]
      Engine: !Ref DatabaseEngine
      EngineVersion: !If [isSpecificVersion, !Ref DatabaseEngineVersion, !Ref "AWS::NoValue"]
      StorageType: !Ref DatabaseStorageType
      MultiAZ: !If [isMultiAZ, yes, no]
      MasterUsername: !If [isRestore, !Ref "AWS::NoValue", !Ref DatabaseUser]
      MasterUserPassword: !If [isRestore, !Ref "AWS::NoValue", !Ref DatabasePass]
      DBSnapshotIdentifier: !If [isRestore, !Ref DatabaseSnapshot, !Ref "AWS::NoValue"]
      DBSubnetGroupName: !Ref SubnetGroup
      VPCSecurityGroups:
        - !GetAtt SecurityGroup.GroupId

Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id'
    Value: 'rds/database'
  Cluster:
    Description: 'RDS database'
    Value: !Ref Database
    Export:
      Name: !Sub '${AWS::StackName}-Database'
  VPC:
    Description: 'VPC of RDS database'
    Value:
      'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  SecurityGroup:
    Description: 'Security Group of RDS database'
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
  EndpointAddress:
    Description: 'RDS endpoint address'
    Value: !GetAtt 'Database.Endpoint.Address'
    Export:
      Name: !Sub '${AWS::StackName}-EndpointAddress'
  EndpointPort:
    Description: 'RDS endpoint port'
    Value: !GetAtt 'Database.Endpoint.Port'
    Export:
      Name: !Sub '${AWS::StackName}-EndpointPort'
  DatabaseUser:
    Description: 'database master username'
    Value: !If [isRestore, "none", !Ref DatabaseUser]
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseUser'
  DatabasePass:
    Description: 'database master password'
    Value: !If [isRestore, "none", !Ref DatabasePass]
    Export:
      Name: !Sub '${AWS::StackName}-DatabasePass'
