---
AWSTemplateFormatVersion: '2010-09-09'
Description: "ECS Task Definition: based on ecs/task-definition.yaml, a cloudonaut.io template"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Application Parameters'
      Parameters:
      - AppHostPattern
      - AppRepo
      - AppCommand
      - AppEnv
      - AppName
      - AppTag
      - AppPort
      - AppCpu
      - AppMemory
      - AppForceHttps
    - Label:
        default: 'Nginx Proxy Parameters'
      Parameters:
      - NginxProxy
      - NginxClientMaxBodySize
      - NginxProxyCpu
      - NginxProxyMemory
      - NginxContainerName
      - NginxContainerPort
Parameters:
  AppHostPattern:
    Description: 'Optional host pattern'
    Type: String
    Default: ''
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255
  AppRepo:
    Type: String
    Description: The slug for the GitHub repository that will deploy to this service
  AppCommand:
    Type: String
    Default: ''
    Description: Optional custom docker command to run for this service
  AppEnv:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: Application environment
  AppName:
    Type: String
    Default: app
    Description: Application name (used as container name, needs to match docker directory for nginx to handle assets)
  AppTag:
    Type: String
    Default: latest
    Description: AppTag to deploy for this service (docker tag on ECR)
  AppPort:
    Type: Number
    Default: 3000
    Description: The port that the Rails app is running on
  AppCpu:
    Type: Number
    Default: 128
    Description: The amount of cpu to allocate to nginx proxy
  AppMemory:
    Type: Number
    Default: 128
    Description: The amount of memory to allocate to nginx proxy
  AppForceHttps:
    Type: String
    Default: 'yes'
    AllowedValues:
    - 'yes'
    - 'no'
    Description: Redirect all HTTP traffic to HTTPS
  NginxProxy:
    Type: String
    Default: 'yes'
    Description: Include nginx proxy in front of ecs task?
    AllowedValues:
    - 'yes'
    - 'no'
  NginxClientMaxBodySize:
    Type: String
    Default: '1m'
    Description: Max upload file size (0 for disabled) (http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size)
  NginxProxyCpu:
    Type: Number
    Default: 64
    Description: The amount of cpu to allocate to nginx proxy
  NginxProxyMemory:
    Type: Number
    Default: 64
    Description: The amount of memory to allocate to nginx proxy
  NginxContainerName:
    Type: String
    Default: nginx
  NginxContainerPort:
    Type: Number
    Default: 80
    Description: The port that the nginx proxy is running on
Mappings: {}
Conditions:
  HasAppHostPattern: !Not [!Equals [!Ref AppHostPattern, '']]
  HasNginxProxy: !Equals [!Ref NginxProxy, 'yes']
  HasNotNginxProxy: !Not [!Condition HasNginxProxy]
  HasAppForceHttps: !Equals [!Ref AppForceHttps, 'yes']
  HasAppCommand: !Not [!Equals [!Ref AppCommand, '']]
Resources:
  TaskBucket:
    Type: AWS::S3::Bucket
  # EcrRepository:
  #   Type: AWS::ECR::Repository
  #   Properties:
  #     RepositoryName: !Ref AppRepo
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
  TaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ecs-tasks.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: s3
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 's3:*'
            Resource:
            - !Sub 'arn:aws:s3:::${TaskBucket}'
            - !Sub 'arn:aws:s3:::${TaskBucket}/*'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      ContainerDefinitions:
        - Name: !Ref AppName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppRepo}:${AppTag}
          Essential: true
          Cpu: !Ref AppCpu
          Memory: !Ref AppMemory
          Command: !If
            - HasAppCommand
            - !Split
              - ' '
              - !Ref AppCommand
            - !Ref 'AWS::NoValue'
          Environment:
            - Name: RAILS_ENV
              Value: !Ref AppEnv
            - Name: APP_ENV
              Value: !Ref AppEnv
            - Name: AWS_BUCKET_NAME
              Value: !Ref TaskBucket
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
            - !If
              - HasAppHostPattern
              - Name: APP_HOST
                Value: !Ref AppHostPattern
              - !Ref 'AWS::NoValue'
            - Name: APP_PROTOCOL
              Value: !If
                - HasAppForceHttps
                - "https://"
                - "http://"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
        - !If
          - HasNotNginxProxy
          - !Ref 'AWS::NoValue'
          - Name: !Ref NginxContainerName
            Image: cmr1/nginx-proxy
            Essential: true
            Cpu: !Ref NginxProxyCpu
            Memory: !Ref NginxProxyMemory
            Links:
              - !Sub "${AppName}:${AppName}"
            PortMappings:
              - ContainerPort: !Ref NginxContainerPort
                HostPort: 0
            VolumesFrom:
              - SourceContainer: !Ref AppName
            Environment:
              - Name: CLIENT_MAX_BODY_SIZE
                Value: !Ref NginxClientMaxBodySize
              - Name: SERVER_NAME
                Value: !If
                  - HasAppHostPattern
                  - !Ref AppHostPattern
                  - '_'
              - Name: SERVER_BACKENDS
                Value: !Sub "/:${AppName}:${AppPort}"
              - Name: SERVER_TYPE
                Value: !If
                  - HasAppForceHttps
                  - "elb"
                  - "http"
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref CloudwatchLogsGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: !Ref AWS::StackName

  # DBResetTaskDefinition:
  #   Type: AWS::ECS::TaskDefinition
  #   Condition: HasAppTypeRails
  #   Properties:
  #     Family: !Sub ${AWS::StackName}-db-reset
  #     TaskRoleArn: !GetAtt 'TaskRole.Arn'
  #     ContainerDefinitions:
  #       - Name: !Ref AppName
  #         Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppRepo}:${AppTag}
  #         Cpu: !Ref AppCpu
  #         Memory: !Ref AppMemory
  #         Command:
  #           - bundle
  #           - exec
  #           - rake 
  #           - db:reset
  #         Environment:
  #           - Name: APP_ENV
  #             Value: !Ref AppEnv
  #           - Name: AWS_BUCKET_NAME
  #             Value: !Ref TaskBucket
  #           - Name: AWS_REGION
  #             Value: !Ref 'AWS::Region'
  #           - Name: APP_HOST
  #             Value: !Ref NginxServerName
  #           - Name: APP_PROTOCOL
  #             Value: !If
  #               - HasAppForceHttps
  #               - "https://"
  #               - "http://"
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group: !Ref CloudwatchLogsGroup
  #             awslogs-region: !Ref AWS::Region
  #             awslogs-stream-prefix: !Ref AWS::StackName

  # DBMigrateTaskDefinition:
  #   Type: AWS::ECS::TaskDefinition
  #   Condition: HasAppTypeRails
  #   Properties:
  #     Family: !Sub ${AWS::StackName}-db-migrate
  #     TaskRoleArn: !GetAtt 'TaskRole.Arn'
  #     ContainerDefinitions:
  #       - Name: !Ref AppName
  #         Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppRepo}:${AppTag}
  #         Essential: true
  #         Cpu: !Ref AppCpu
  #         Memory: !Ref AppMemory
  #         Command:
  #           - bundle
  #           - exec
  #           - rake 
  #           - db:migrate
  #         Environment:
  #           - Name: APP_ENV
  #             Value: !Ref AppEnv
  #           - Name: AWS_BUCKET_NAME
  #             Value: !Ref TaskBucket
  #           - Name: AWS_REGION
  #             Value: !Ref 'AWS::Region'
  #           - Name: APP_HOST
  #             Value: !Ref NginxServerName
  #           - Name: APP_PROTOCOL
  #             Value: !If
  #               - HasAppForceHttps
  #               - "https://"
  #               - "http://"
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group: !Ref CloudwatchLogsGroup
  #             awslogs-region: !Ref AWS::Region
  #             awslogs-stream-prefix: !Ref AWS::StackName
Outputs:
  TaskBucket:
    Value: !Ref TaskBucket
    Export: 
      Name: !Sub '${AWS::StackName}-TaskBucket'
  TaskDefinition:
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinition'
  TaskRole:
    Value: !Ref TaskRole
    Export:
      Name: !Sub '${AWS::StackName}-TaskRole'
  AppCommand:
    Condition: HasAppCommand
    Value: !Ref AppCommand
    Export:
      Name: !Sub '${AWS::StackName}-AppCommand'
  AppRepo:
    Value: !Ref AppRepo
    Export:
      Name: !Sub '${AWS::StackName}-AppRepo'
  AppEnv:
    Value: !Ref AppEnv
    Export:
      Name: !Sub '${AWS::StackName}-AppEnv'
  AppName:
    Value: !Ref AppName
    Export:
      Name: !Sub '${AWS::StackName}-AppName'
  AppTag:
    Value: !Ref AppTag
    Export:
      Name: !Sub '${AWS::StackName}-AppTag'
  AppPort:
    Value: !Ref AppPort
    Export:
      Name: !Sub '${AWS::StackName}-AppPort'
  AppCpu:
    Value: !Ref AppCpu
    Export:
      Name: !Sub '${AWS::StackName}-AppCpu'
  AppMemory:
    Value: !Ref AppMemory
    Export:
      Name: !Sub '${AWS::StackName}-AppMemory'
  AppForceHttps:
    Value: !Ref AppForceHttps
    Export:
      Name: !Sub '${AWS::StackName}-AppForceHttps'
  AppHostPattern:
    Value: !Ref AppHostPattern
    Export:
      Name: !Sub '${AWS::StackName}-AppHostPattern'
  NginxClientMaxBodySize:
    Value: !Ref NginxClientMaxBodySize
    Export:
      Name: !Sub '${AWS::StackName}-NginxClientMaxBodySize'
  NginxProxyCpu:
    Value: !Ref NginxProxyCpu
    Export:
      Name: !Sub '${AWS::StackName}-NginxProxyCpu'
  NginxProxyMemory:
    Value: !Ref NginxProxyMemory
    Export:
      Name: !Sub '${AWS::StackName}-NginxProxyMemory'
  NginxContainerName:
    Value: !Ref NginxContainerName
    Export:
      Name: !Sub '${AWS::StackName}-NginxContainerName'
  NginxContainerPort:
    Value: !Ref NginxContainerPort
    Export:
      Name: !Sub '${AWS::StackName}-NginxContainerPort'